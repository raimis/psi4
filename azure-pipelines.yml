# Psi4 pipeline

trigger:
  - master

jobs:

  # Configure, build, install, and test job
  - job: 'build'
    pool:
      vmImage: 'vs2015-win2012r2'
    timeoutInMinutes: 120
    steps:

      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"

      # Install Miniconda
      - script: |
          choco install miniconda3 --yes
          set PATH=C:\tools\miniconda3\Scripts;C:\tools\miniconda3;C:\tools\miniconda3\Library\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          set LIB=C:\tools\miniconda3\Library\lib;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"

      # Configure Miniconda
      - script: |
          conda config --set always_yes yes
          conda config --append channels conda-forge
          conda config --append channels psi4
          conda info
        displayName: "Configure Miniconda"

      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      - script: |
          conda install cmake ^
                        conda-build ^
                        conda-verify ^
                        deepdiff ^
                        intel-openmp=2018.0.3 ^
                        mkl-devel ^
                        mpmath ^
                        networkx ^
                        ninja ^
                        numpy ^
                        pint ^
                        pybind11 ^
                        pytest ^
                        pytest-xdist ^
                        python=3.6 ^
                        qcelemental
          conda list
        displayName: "Install conda packages"

      # Install LLVM
      # Note: LLVM distributed by conda is too old
      - script: |
          choco install llvm --yes
          set PATH=C:\Program Files\LLVM\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          clang-cl --version
        displayName: "Install LLVM"

      # Configure
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=Debug ^
                -DCMAKE_INSTALL_PREFIX=../install ^
                -DCMAKE_C_COMPILER=clang-cl ^
                -DCMAKE_CXX_COMPILER=clang-cl ^
                -DENABLE_XHOST=OFF ^
                -DMAX_AM_ERI=6 ^
                $(Build.SourcesDirectory)
        displayName: "Configure Psi4"
        workingDirectory: $(Build.BinariesDirectory)

      # Build
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config Debug ^
                -- -j %NUMBER_OF_PROCESSORS%
        displayName: "Build Psi4"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Install
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config Debug ^
                --target install ^
                -- -j %NUMBER_OF_PROCESSORS%
        displayName: "Install Psi4"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (OpenMP)
      # Check if OpenMP configuration had not failed silently
      - script: |
          python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
        displayName: "Test Psi4 (OpenMP)"
        workingDirectory: $(Build.BinariesDirectory)/install/lib

      # Test (quick ctest)
      #
      # Exclude failing tests:
      #   - ci-property
      #
      - script: |
          ctest --build-config Debug ^
                --label-regex quick ^
                --output-on-failure ^
                --parallel %NUMBER_OF_PROCESSORS%
        displayName: "Test Psi4 (quick ctest)"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (quick pytest)
      - script: |
          set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%
          set PYTHONPATH=$(Build.BinariesDirectory)\install\lib;%PYTHONPATH%
          psi4 --test quick
        displayName: "Test Psi4 (full pytest)"
        workingDirectory: $(Build.BinariesDirectory)/install/bin

      # Package Psi4
      - script: |
          set INSTALL_DIR=$(Build.BinariesDirectory)\install
          conda build --python 3.6 ^
                      conda\win
          copy /y C:\tools\miniconda3\conda-bld\win-64\psi4-*.bz2 $(Build.ArtifactStagingDirectory)
        displayName: "Package Psi4"

      # Publish conda package
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: conda
          displayName: "Publish conda package"
